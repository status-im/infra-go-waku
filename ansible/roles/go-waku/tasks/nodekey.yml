---
- name: 'Create container dir: {{ go_waku_cont_name }}'
  file:
    path: '{{ go_waku_cont_vol }}'
    state: directory
    owner: dockremap
    group: docker

- name: Check if node key file exists
  stat:
    path: '{{ go_waku_node_key_file_path }}'
  register: key_file

- name: Generate random node key
  throttle: 1
  set_fact:
    # Node key needs to be a 64 char hexadecimal string
    go_waku_random_node_key: '{{ lookup("password", "/dev/null") | hash("sha256") }}'
  when: not key_file.stat.exists

- name: Save generate node key to file
  copy:
    dest: '{{ go_waku_node_key_file_path | mandatory }}'
    content: '{{ go_waku_random_node_key | mandatory }}'
    mode: 0400
  when: not key_file.stat.exists

- name: Read node key to from a file
  slurp:
    src: '{{ go_waku_node_key_file_path }}'
  register: nodekey_slurp

- name: Extract node key
  set_fact:
    go_waku_node_key: '{{ nodekey_slurp.content | b64decode | trim }}'

- name: Check if public key exists
  stat:
    path: '{{ go_waku_node_multiaddr_path }}'
  register: pubkey_file

- name: Generate public key
  docker_container:
    name: '{{ go_waku_service_name }}-genkey'
    image: '{{ go_waku_cont_image }}'
    user: root
    auto_remove: true
    # Avoid deprecation warning
    container_default_behavior: 'compatibility'
    entrypoint: '/bin/sh'
    command: |
      -c '/usr/bin/waku --show-addresses \
            --port={{ go_waku_libp2p_port }} \
            --advertise-address={{ go_waku_public_address }} \
            --nodekey={{ go_waku_node_key }} > /node/multiaddr'
    volumes:
      - '{{ go_waku_cont_vol }}:/node:rw'
  when: pubkey_file.stat.exists == False

- name: Read public key to from a file
  slurp:
    src: '{{ go_waku_node_multiaddr_path }}'
  register: pubkey_slurp

- name: Extract node key
  set_fact:
    go_waku_node_multiaddr: '{{ pubkey_slurp.content | b64decode | trim }}'
    go_waku_node_peer_id: '{{ pubkey_slurp.content | b64decode | trim | split("/") | last }}'
